  if len(A) == 0 or len(A) == 2: #finished recursing
    return None
  if len(A) == 1: #left with singular element
    return index
  
  else:
    mid = len(A) // 2

    if A[mid] != A[mid-1] and A[mid] != A[mid+1]: #Found the odd number
      return mid
    
    else:
      if A[mid] == A[mid - 1]: #These two elements are the same
        high = mid -2
        low = mid + 1
      else:
        high = mid -1
        low = mid + 2

      index = high
      left = find_single(A[:high],index)
      if left != None:
        return left

      index = low
      right = find_single(A[low:],index)
      if right != None:
        return right


      if left_search == None:
        print("=====left search is none")
        return right_search
      else:
        print("=====left search is found")
        return left_search

    else: #A[mid] == A[mid-1]
      left_search = find_single(A[:mid-2], len(A[:mid-2])//2 -1, low, mid-2)
      right_search = find_single(A[mid+1:], len(A[mid+1:])//2 -1, mid+1, high)
      if left_search == None:
        print("=====left search is none")
        return right_search
      else:
        print("=====left search is found")
        return left_search